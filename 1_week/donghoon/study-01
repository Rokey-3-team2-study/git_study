Git 
버전 관리 시스템: 코드 변경 내역을 기록하고, 이전 버전으로 되돌릴 수 있음.

브랜칭: 독립적인 작업 공간을 만들 수 있음.

분산형: 중앙 서버 없이 로컬에서 작업 가능.

GitHub
Git 저장소 호스팅 서비스: 온라인에서 Git 저장소를 관리하고 협업할 수 있음.

리포지토리: 프로젝트 단위로 코드와 이력을 관리.

풀 리퀘스트: 코드 변경 검토 요청 및 코드 리뷰 기능.





새로운 브랜치 생성
브랜치 생성:

bash
git branch [브랜치명]
예를 들어, feature-branch라는 브랜치를 만들고 싶다면 다음과 같이 입력하면 됩니다:

bash
git branch feature-branch
생성한 브랜치로 전환
브랜치 전환:

bash
git checkout [브랜치명]
방금 만든 feature-branch로 이동하려면, 다음 명령어를 사용하면 됩니다:

bash
git checkout feature-branch
브랜치 생성과 동시에 전환
한 번에 브랜치 생성 및 전환: 생성과 동시에 새 브랜치로 전환하려면 아래의 명령어를 사용합니다:

bash
git checkout -b [브랜치명]
예를 들어, feature-branch라는 브랜치를 생성하고 동시에 이동하려면 다음과 같이 입력하면 됩니다:

bash
git 






병합(Merge) 방법
1. 병합할 브랜치로 이동
먼저 병합할 대상 브랜치로 이동합니다. 예를 들어, main 브랜치로 이동한다고 가정할게요:

bash
git checkout main
2. 병합 수행
병합할 브랜치의 변경 사항을 main 브랜치에 병합합니다. 예를 들어, feature-branch라는 브랜치를 병합할 때:

bash
git merge feature-branch
병합 시 충돌 해결
병합 과정 중에 충돌이 발생할 수 있습니다. 그럴 때는 두 가지 변경 사항을 수작업으로 조정하고 저장한 후에 다음 명령어를 실행합니다:

bash
git add .
git 





[파일 등록]


bash
git checkout donghoon
donghoon 브랜치로 전환합니다.

2. 파일 추가 및 커밋
작성한 파일을 스테이징 영역에 추가하고 커밋합니다.

bash
git add [파일명]
모든 변경된 파일을 추가하려면:

bash
git add .
변경 내용을 커밋합니다.

bash
git commit -m "커밋 메시지"
예를 들어:

bash
git commit -m "Add updates to donghoon branch"
3. 원격 저장소로 푸시
로컬 donghoon 브랜치의 변경 내용을 원격 저장소로 푸시합니다.

bash
git push origin 


